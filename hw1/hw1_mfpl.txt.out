TOKEN: LETSTAR   LEXEME: let*
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: some
TOKEN: LAMBDA    LEXEME: lambda
TOKEN: INPUT     LEXEME: input
TOKEN: ADD       LEXEME: +
TOKEN: INTCONST  LEXEME: -1234
TOKEN: MULT      LEXEME: *
TOKEN: DIV       LEXEME: /
TOKEN: SUB       LEXEME: -
TOKEN: INTCONST  LEXEME: 0123
TOKEN: INTCONST  LEXEME: 99
TOKEN: ADD       LEXEME: +
TOKEN: IDENT     LEXEME: x
TOKEN: IDENT     LEXEME: _underscore_this
TOKEN: RPAREN    LEXEME: )
TOKEN: UNKNOWN   LEXEME: &
TOKEN: UNKNOWN   LEXEME: &
TOKEN: UNKNOWN   LEXEME: ^
TOKEN: PRINT     LEXEME: print
TOKEN: IF        LEXEME: if
TOKEN: IDENT     LEXEME: flex
TOKEN: IDENT     LEXEME: let
TOKEN: INTCONST  LEXEME: 203978
TOKEN: INTCONST  LEXEME: -2
TOKEN: ADD       LEXEME: +
TOKEN: STRCONST  LEXEME: "30x^2"
TOKEN: UNKNOWN   LEXEME: %
TOKEN: UNKNOWN   LEXEME: !
TOKEN: INTCONST  LEXEME: 1
TOKEN: INTCONST  LEXEME: +2
TOKEN: INTCONST  LEXEME: 3
TOKEN: ADD       LEXEME: +
TOKEN: INTCONST  LEXEME: 4
TOKEN: GT        LEXEME: >
TOKEN: T         LEXEME: t
TOKEN: INTCONST  LEXEME: -5
TOKEN: ADD       LEXEME: +
TOKEN: INTCONST  LEXEME: 6
TOKEN: UNKNOWN   LEXEME: "
TOKEN: IDENT     LEXEME: a
TOKEN: IDENT     LEXEME: bc
TOKEN: UNKNOWN   LEXEME: "
TOKEN: INTCONST  LEXEME: 7
TOKEN: INTCONST  LEXEME: 5
TOKEN: GE        LEXEME: >=
TOKEN: NIL       LEXEME: nil
TOKEN: AND       LEXEME: and
TOKEN: INTCONST  LEXEME: 4
TOKEN: OR        LEXEME: or
TOKEN: NOT       LEXEME: not
TOKEN: IDENT     LEXEME: toBe1
TOKEN: LT        LEXEME: <
TOKEN: LE        LEXEME: <=
TOKEN: EQ        LEXEME: =
TOKEN: INTCONST  LEXEME: 78
TOKEN: NE        LEXEME: /=
TOKEN: INTCONST  LEXEME: -42
