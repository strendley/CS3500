TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LETSTAR   LEXEME: let*					TOKEN: LETSTAR   LEXEME: let*

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon						ID_EXPR_LIST -> epsilon
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
TOKEN: INTCONST  LEXEME: 5					TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding x to symbol table					___Adding x to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: f1					TOKEN: IDENT     LEXEME: f1
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LAMBDA    LEXEME: lambda					TOKEN: LAMBDA    LEXEME: lambda

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_LIST -> epsilon						ID_LIST -> epsilon
TOKEN: IDENT     LEXEME: a					TOKEN: IDENT     LEXEME: a
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding a to symbol table					___Adding a to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LETSTAR   LEXEME: let*					TOKEN: LETSTAR   LEXEME: let*

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon						ID_EXPR_LIST -> epsilon
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: ADD       LEXEME: +					TOKEN: ADD       LEXEME: +
ARITH_OP -> +							ARITH_OP -> +
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: a					TOKEN: IDENT     LEXEME: a
EXPR -> IDENT							EXPR -> IDENT
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding y to symbol table					___Adding y to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: f2					TOKEN: IDENT     LEXEME: f2
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LAMBDA    LEXEME: lambda					TOKEN: LAMBDA    LEXEME: lambda

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_LIST -> epsilon						ID_LIST -> epsilon
TOKEN: IDENT     LEXEME: a					TOKEN: IDENT     LEXEME: a
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding a to symbol table					___Adding a to symbol table
TOKEN: IDENT     LEXEME: b					TOKEN: IDENT     LEXEME: b
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding b to symbol table					___Adding b to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LETSTAR   LEXEME: let*					TOKEN: LETSTAR   LEXEME: let*

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon						ID_EXPR_LIST -> epsilon
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: z					TOKEN: IDENT     LEXEME: z
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding z to symbol table					___Adding z to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print					TOKEN: PRINT     LEXEME: print
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: MULT      LEXEME: *					TOKEN: MULT      LEXEME: *
ARITH_OP -> *							ARITH_OP -> *
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: b					TOKEN: IDENT     LEXEME: b
EXPR -> IDENT							EXPR -> IDENT
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -					TOKEN: SUB       LEXEME: -
ARITH_OP -> -							ARITH_OP -> -
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: a					TOKEN: IDENT     LEXEME: a
EXPR -> IDENT							EXPR -> IDENT
TOKEN: IDENT     LEXEME: z					TOKEN: IDENT     LEXEME: z
EXPR -> IDENT							EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
PRINT_EXPR -> print EXPR					PRINT_EXPR -> print EXPR
PARENTHESIZED_EXPR -> PRINT_EXPR				PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR				LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR					PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR				LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LAMBDA_EXPR				PARENTHESIZED_EXPR -> LAMBDA_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding f2 to symbol table					___Adding f2 to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: f2					TOKEN: IDENT     LEXEME: f2
EXPR -> IDENT							EXPR -> IDENT
TOKEN: INTCONST  LEXEME: -100					TOKEN: INTCONST  LEXEME: -100
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: IDENT     LEXEME: a					TOKEN: IDENT     LEXEME: a
EXPR -> IDENT							EXPR -> IDENT
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR						EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST					PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR				LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR					PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR				LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LAMBDA_EXPR				PARENTHESIZED_EXPR -> LAMBDA_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding f1 to symbol table					___Adding f1 to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
TOKEN: INTCONST  LEXEME: 50					TOKEN: INTCONST  LEXEME: 50
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding y to symbol table					___Adding y to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IF        LEXEME: if					TOKEN: IF        LEXEME: if
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: f1					TOKEN: IDENT     LEXEME: f1
EXPR -> IDENT							EXPR -> IDENT
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR						EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST					PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
EXPR -> IDENT							EXPR -> IDENT
TOKEN: INTCONST  LEXEME: 2					TOKEN: INTCONST  LEXEME: 2
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
IF_EXPR -> if EXPR EXPR EXPR					IF_EXPR -> if EXPR EXPR EXPR
PARENTHESIZED_EXPR -> IF_EXPR					PARENTHESIZED_EXPR -> IF_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR				LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR					PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR							START -> EXPR

---- Completed parsing ----					---- Completed parsing ----

