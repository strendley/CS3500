TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: MULT      LEXEME: *					TOKEN: MULT      LEXEME: *
ARITH_OP -> *							ARITH_OP -> *
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: INTCONST  LEXEME: 5					TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: STRCONST  LEXEME: "big bad woof"				TOKEN: STRCONST  LEXEME: "big bad woof"
CONST -> STRCONST						CONST -> STRCONST
EXPR -> CONST							EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LETSTAR   LEXEME: let*					TOKEN: LETSTAR   LEXEME: let*

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon						ID_EXPR_LIST -> epsilon
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
TOKEN: INTCONST  LEXEME: 5					TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding x to symbol table					___Adding x to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
TOKEN: INTCONST  LEXEME: 6					TOKEN: INTCONST  LEXEME: 6
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding y to symbol table					___Adding y to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: red					TOKEN: IDENT     LEXEME: red
TOKEN: T         LEXEME: t					TOKEN: T         LEXEME: t
CONST -> t							CONST -> t
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding red to symbol table					___Adding red to symbol table
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: black					TOKEN: IDENT     LEXEME: black
TOKEN: NIL       LEXEME: nil					TOKEN: NIL       LEXEME: nil
CONST -> nil							CONST -> nil
EXPR -> CONST							EXPR -> CONST
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )			ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding black to symbol table					___Adding black to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IF        LEXEME: if					TOKEN: IF        LEXEME: if
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: NOT       LEXEME: not					TOKEN: NOT       LEXEME: not
UN_OP -> not							UN_OP -> not
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: AND       LEXEME: and					TOKEN: AND       LEXEME: and
LOG_OP -> and							LOG_OP -> and
BIN_OP -> LOG_OP						BIN_OP -> LOG_OP
TOKEN: IDENT     LEXEME: red					TOKEN: IDENT     LEXEME: red
EXPR -> IDENT							EXPR -> IDENT
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: OR        LEXEME: or					TOKEN: OR        LEXEME: or
LOG_OP -> or							LOG_OP -> or
BIN_OP -> LOG_OP						BIN_OP -> LOG_OP
TOKEN: IDENT     LEXEME: black					TOKEN: IDENT     LEXEME: black
EXPR -> IDENT							EXPR -> IDENT
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: GT        LEXEME: >					TOKEN: GT        LEXEME: >
REL_OP -> >							REL_OP -> >
BIN_OP -> REL_OP						BIN_OP -> REL_OP
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -					TOKEN: SUB       LEXEME: -
ARITH_OP -> -							ARITH_OP -> -
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: INPUT     LEXEME: input					TOKEN: INPUT     LEXEME: input
INPUT_EXPR -> input						INPUT_EXPR -> input
PARENTHESIZED_EXPR -> INPUT_EXPR				PARENTHESIZED_EXPR -> INPUT_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
EXPR -> IDENT							EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> UN_OP EXPR					ARITHLOGIC_EXPR -> UN_OP EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
EXPR -> IDENT							EXPR -> IDENT
IF_EXPR -> if EXPR EXPR EXPR					IF_EXPR -> if EXPR EXPR EXPR
PARENTHESIZED_EXPR -> IF_EXPR					PARENTHESIZED_EXPR -> IF_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR				LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR					PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print					TOKEN: PRINT     LEXEME: print
TOKEN: STRCONST  LEXEME: "here kitty^3"				TOKEN: STRCONST  LEXEME: "here kitty^3"
CONST -> STRCONST						CONST -> STRCONST
EXPR -> CONST							EXPR -> CONST
PRINT_EXPR -> print EXPR					PRINT_EXPR -> print EXPR
PARENTHESIZED_EXPR -> PRINT_EXPR				PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: LAMBDA    LEXEME: lambda					TOKEN: LAMBDA    LEXEME: lambda

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
ID_LIST -> epsilon						ID_LIST -> epsilon
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding x to symbol table					___Adding x to symbol table
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding y to symbol table					___Adding y to symbol table
TOKEN: IDENT     LEXEME: z					TOKEN: IDENT     LEXEME: z
ID_LIST -> ID_LIST IDENT					ID_LIST -> ID_LIST IDENT
___Adding z to symbol table					___Adding z to symbol table
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: DIV       LEXEME: /					TOKEN: DIV       LEXEME: /
ARITH_OP -> /							ARITH_OP -> /
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: x					TOKEN: IDENT     LEXEME: x
EXPR -> IDENT							EXPR -> IDENT
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -					TOKEN: SUB       LEXEME: -
ARITH_OP -> -							ARITH_OP -> -
BIN_OP -> ARITH_OP						BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: y					TOKEN: IDENT     LEXEME: y
EXPR -> IDENT							EXPR -> IDENT
TOKEN: IDENT     LEXEME: z					TOKEN: IDENT     LEXEME: z
EXPR -> IDENT							EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR				LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR

___Exiting scope...						___Exiting scope...

PARENTHESIZED_EXPR -> LAMBDA_EXPR				PARENTHESIZED_EXPR -> LAMBDA_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: INPUT     LEXEME: input					TOKEN: INPUT     LEXEME: input
INPUT_EXPR -> input						INPUT_EXPR -> input
PARENTHESIZED_EXPR -> INPUT_EXPR				PARENTHESIZED_EXPR -> INPUT_EXPR
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR						EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST					EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST					PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR							START -> EXPR

---- Completed parsing ----					---- Completed parsing ----

