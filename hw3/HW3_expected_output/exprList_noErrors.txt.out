TOKEN: LPAREN    LEXEME: (
TOKEN: LPAREN    LEXEME: (
TOKEN: MULT      LEXEME: *
ARITH_OP -> *
BIN_OP -> ARITH_OP
TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST
EXPR -> CONST
TOKEN: STRCONST  LEXEME: "big bad woof"
CONST -> STRCONST
EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: LETSTAR   LEXEME: let*

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_EXPR_LIST -> epsilon
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: x
TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST
EXPR -> CONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding x to symbol table
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: y
TOKEN: INTCONST  LEXEME: 6
CONST -> INTCONST
EXPR -> CONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding y to symbol table
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: red
TOKEN: T         LEXEME: t
CONST -> t
EXPR -> CONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding red to symbol table
TOKEN: LPAREN    LEXEME: (
TOKEN: IDENT     LEXEME: black
TOKEN: NIL       LEXEME: nil
CONST -> nil
EXPR -> CONST
TOKEN: RPAREN    LEXEME: )
ID_EXPR_LIST -> ID_EXPR_LIST ( IDENT EXPR )
___Adding black to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: IF        LEXEME: if
TOKEN: LPAREN    LEXEME: (
TOKEN: NOT       LEXEME: not
UN_OP -> not
TOKEN: LPAREN    LEXEME: (
TOKEN: AND       LEXEME: and
LOG_OP -> and
BIN_OP -> LOG_OP
TOKEN: IDENT     LEXEME: red
EXPR -> IDENT
TOKEN: LPAREN    LEXEME: (
TOKEN: OR        LEXEME: or
LOG_OP -> or
BIN_OP -> LOG_OP
TOKEN: IDENT     LEXEME: black
EXPR -> IDENT
TOKEN: LPAREN    LEXEME: (
TOKEN: GT        LEXEME: >
REL_OP -> >
BIN_OP -> REL_OP
TOKEN: IDENT     LEXEME: x
EXPR -> IDENT
TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -
ARITH_OP -> -
BIN_OP -> ARITH_OP
TOKEN: LPAREN    LEXEME: (
TOKEN: INPUT     LEXEME: input
INPUT_EXPR -> input
PARENTHESIZED_EXPR -> INPUT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: y
EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> UN_OP EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: IDENT     LEXEME: x
EXPR -> IDENT
TOKEN: IDENT     LEXEME: y
EXPR -> IDENT
IF_EXPR -> if EXPR EXPR EXPR
PARENTHESIZED_EXPR -> IF_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LET_EXPR -> let* ( ID_EXPR_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LET_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print
TOKEN: STRCONST  LEXEME: "here kitty^3"
CONST -> STRCONST
EXPR -> CONST
PRINT_EXPR -> print EXPR
PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: LAMBDA    LEXEME: lambda

___Entering new scope...

TOKEN: LPAREN    LEXEME: (
ID_LIST -> epsilon
TOKEN: IDENT     LEXEME: x
ID_LIST -> ID_LIST IDENT
___Adding x to symbol table
TOKEN: IDENT     LEXEME: y
ID_LIST -> ID_LIST IDENT
___Adding y to symbol table
TOKEN: IDENT     LEXEME: z
ID_LIST -> ID_LIST IDENT
___Adding z to symbol table
TOKEN: RPAREN    LEXEME: )
TOKEN: LPAREN    LEXEME: (
TOKEN: DIV       LEXEME: /
ARITH_OP -> /
BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: x
EXPR -> IDENT
TOKEN: LPAREN    LEXEME: (
TOKEN: SUB       LEXEME: -
ARITH_OP -> -
BIN_OP -> ARITH_OP
TOKEN: IDENT     LEXEME: y
EXPR -> IDENT
TOKEN: IDENT     LEXEME: z
EXPR -> IDENT
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
LAMBDA_EXPR -> lambda ( ID_LIST ) EXPR

___Exiting scope...

PARENTHESIZED_EXPR -> LAMBDA_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: INPUT     LEXEME: input
INPUT_EXPR -> input
PARENTHESIZED_EXPR -> INPUT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST
EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR

---- Completed parsing ----

