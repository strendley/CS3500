TOKEN: LPAREN    LEXEME: (
TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print
TOKEN: STRCONST  LEXEME: "Enter something: "
CONST -> STRCONST
EXPR -> CONST
PRINT_EXPR -> print EXPR
"Enter something: "
PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: OR        LEXEME: or
LOG_OP -> or
BIN_OP -> LOG_OP
TOKEN: NIL       LEXEME: nil
CONST -> nil
EXPR -> CONST
TOKEN: LPAREN    LEXEME: (
TOKEN: INPUT     LEXEME: input
INPUT_EXPR -> input
PARENTHESIZED_EXPR -> INPUT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: RPAREN    LEXEME: )
EXPR_LIST -> EXPR
EXPR_LIST -> EXPR EXPR_LIST
PARENTHESIZED_EXPR -> EXPR_LIST
EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR

---- Completed parsing ----


Value of the expression is: t
